import time
import os
import cv2
import pyautogui
import requests
import random
import logging
from faker import Faker
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

# === –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    filename="test_log.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

faker = Faker()

# === –ü—É—Ç–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ===
REPORT_PATH = "report"
BASE_SCREENSHOTS_PATH = os.path.join(REPORT_PATH, "screenshots")
os.makedirs(BASE_SCREENSHOTS_PATH, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç

# === –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º ===
GEO_IMAGES_PATH = "E:\\GEO"
BASE_SCREENSHOTS_PATH = "screenshots"
os.makedirs(BASE_SCREENSHOTS_PATH, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
SITE_URL = "https://valor.bet"

# === –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –ì–ï–û ===
geo_list = ["india",
            "columbia",
            "brazil",
            "egipt",
            "indonezia",
            "korea",
            "malayzia",
            "mexico",
            "pery",
            "venesyela",
            "yzbeckistan",
            "nigerya",
            "bangladesh"
    ]

# === –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
def generate_user_data(geo):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–æ."""
    email = f"user_{geo.lower()}_{random.randint(1000, 9999)}@example.com"
    password = f"Pass_{geo}_{random.randint(1000, 9999)}!"
    phone = faker.phone_number()

    return {"email": email, "password": password, "phone": phone}
# === –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ì–ï–û ===
def create_geo_screenshot_folder(geo_name):
    geo_screenshot_path = os.path.join(BASE_SCREENSHOTS_PATH, geo_name)
    os.makedirs(geo_screenshot_path, exist_ok=True)
    logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {geo_screenshot_path}")
    return geo_screenshot_path

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ ===
def get_driver():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Chrome –≤ —Ä–µ–∂–∏–º–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    logger = logging.getLogger(__name__)

    options = Options()
    mobile_emulation = {"deviceName": "iPhone 12 Pro"}
    options.add_experimental_option("mobileEmulation", mobile_emulation)
    options.add_argument("--disable-blink-features=AutomationControlled")
    #options.add_argument("--headless")  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–∏–¥–µ—Ç—å –±—Ä–∞—É–∑–µ—Ä

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    logger.info("–ó–∞–ø—É—â–µ–Ω –±—Ä–∞—É–∑–µ—Ä –≤ –º–æ–±–∏–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ (iPhone 12 Pro)")

    return driver

# === –ó–∞–ø—É—Å–∫ Surfshark ===
def start_surfshark():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Surfshark"""
    os.system(r'start "" "C:\Program Files\Surfshark\Surfshark.exe"')
    time.sleep(5)

# === –í—ã–±–æ—Ä –ì–ï–û –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ ===
def select_geo(geo_name):
    """–í—ã–±–∏—Ä–∞–µ—Ç –≥–µ–æ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ"""
    image_path = os.path.join(GEO_IMAGES_PATH,  f"{geo_name}.png")
    geo_image = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)

    if geo_image is None:
        print(f"–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {geo_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return False

    location = pyautogui.locateCenterOnScreen(image_path, confidence=0.8)

    if location:
        pyautogui.click(location)
        print(f"–í—ã–±—Ä–∞–Ω–æ –≥–µ–æ: {geo_name}")
        time.sleep(5)
        return True
    else:
        print(f"–û—à–∏–±–∫–∞: –ì–ï–û {geo_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ!")
        return False

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ ===
def register_on_site(driver, user_data):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç–µ"""
    driver.get(SITE_URL)
    WebDriverWait(driver, 15).until(lambda d: d.execute_script("return document.readyState") == "complete")
    time.sleep(15)

    try:
        email_field = driver.find_element(By.XPATH, '//*[@name="email"]')
        email_field.send_keys(user_data["email"])
    except:
        print("–ü–æ–ª–µ email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    try:
        password_field = driver.find_element(By.XPATH, '//*[@name="password"]')
        password_field.send_keys(user_data["password"])
    except:
        print("–ü–æ–ª–µ password –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    try:
        phone_field = driver.find_element(By.XPATH, '//*[@data-testid="phone-input"]')
        phone_field.send_keys(user_data["phone"])
    except:
        print("–ü–æ–ª–µ phone –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    submit_btn = driver.find_element(By.XPATH, '//*[@data-testid="submit-button"]')
    submit_btn.click()

    time.sleep(15)



# === –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ===
def go_to_main_page(driver):
    """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    main_page_element = driver.find_element(By.CSS_SELECTOR, '[aria-label="Valor"]')
    main_page_element.click()
    time.sleep(3)

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä —á–µ—Ä–µ–∑ API ===
def get_game_ids():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏–≥—Ä —Å –¥–≤—É—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ API"""
    all_games_url = "https://valor.bet/s-api/v1/games?page=1&per_page=12&category=all_games&is_mobile=1"
    live_games_url = "https://valor.bet/s-api/v1/games?page=1&per_page=12&category=live&is_mobile=1"

    # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—ã –∏–∑ –¥–≤—É—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    all_games_response = requests.get(all_games_url)
    live_games_response = requests.get(live_games_url)

    if all_games_response.status_code == 200 and live_games_response.status_code == 200:
        all_games = all_games_response.json()["data"]
        live_games = live_games_response.json()["data"]

        all_game_ids = [game["id"] for game in all_games]
        live_game_ids = [game["id"] for game in live_games]

        return all_game_ids + live_game_ids  # –°–ª–∏—è–Ω–∏–µ –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–æ–≤
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä")
        return []

# === –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–≥—Ä—ã –∏ —Å–Ω—è—Ç–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ===
def open_game_and_take_screenshot(driver, geo_name, game_id, geo_screenshot_path):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä—É –ø–æ ID –∏ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç"""
    game_url = f"https://valor.bet/de/casino/current/{game_id}"
    driver.get(game_url)
    time.sleep(3)

    logging.info(f"–û—Ç–∫—Ä—ã—Ç–∞ –∏–≥—Ä–∞ —Å ID {game_id} –≤ —Ä–µ–≥–∏–æ–Ω–µ {geo_name}")

    try:
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        try:
            close_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, '//*[@data-cy="close-modal-button"]'))
            )
            close_button.click()
            logging.info(f"–ú–æ–¥–∞–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –∏–≥—Ä—ã —Å ID {game_id}.")
            time.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
        except Exception:
            logging.info(f"–ú–æ–¥–∞–ª–∫–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –¥–ª—è –∏–≥—Ä—ã —Å ID {game_id}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –µ—ë –∑–∞–∫—Ä—ã—Ç–∏—è.")

        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–≥—Ä—ã
        time.sleep(25)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot_name = f"{geo_name} ‚Äî {game_id}.png"
        screenshot_path = os.path.join(geo_screenshot_path, screenshot_name)
        driver.save_screenshot(screenshot_path)
        logging.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {screenshot_path}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–≥—Ä—ã —Å ID {game_id}: {e}")


# === –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç ===
def run_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ì–ï–û"""
    start_time = time.time()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    test_results = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞

    for geo in geo_list:
        print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –ì–ï–û: {geo}")
        test_start = time.time()

        # –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç–∏–µ Surfshark –∏ –≤—ã–±–æ—Ä –≥–µ–æ
        start_surfshark()
        if not select_geo(geo):
            test_results.append(f"{geo}: ‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ GEO")
            continue

        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ì–ï–û
        geo_screenshot_path = create_geo_screenshot_folder(geo)

        # –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–µ–æ
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        driver = get_driver()
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")

        try:
            user_data = generate_user_data(geo)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–µ–æ
            register_on_site(driver, user_data)
            go_to_main_page(driver)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã
            game_ids = get_game_ids()

            if not game_ids:
                test_results.append(f"{geo}: ‚ö†Ô∏è –ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                for game_id in game_ids:
                    open_game_and_take_screenshot(driver, geo, game_id, geo_screenshot_path)

            test_results.append(f"{geo}: ‚úÖ –£—Å–ø–µ—à–Ω–æ ({len(game_ids)} –∏–≥—Ä)")

        except Exception as e:
            test_results.append(f"{geo}: ‚ùå –û—à–∏–±–∫–∞ - {str(e)}")
            logging.error(f"–û—à–∏–±–∫–∞ –≤ GEO {geo}: {e}")

        finally:
            driver.quit()

        test_end = time.time()
        test_duration = round(test_end - test_start, 2)
        print(f"–¢–µ—Å—Ç –¥–ª—è {geo} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {test_duration} —Å–µ–∫")

        # –ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞
    end_time = time.time()
    total_duration = round(end_time - start_time, 2)

    # === –ó–∞–ø–∏—Å—å –æ—Ç—á–µ—Ç–∞ ===
    # === HTML –æ—Ç—á–µ—Ç ===
    html_report_path = os.path.join(REPORT_PATH, "index.html")
    with open(html_report_path, "w", encoding="utf-8") as html_file:
        html_file.write("""
        <html>
        <head>
            <title>–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç</title>
            <style>
                body { font-family: 'Segoe UI', sans-serif; background-color: #f5f7fa; color: #333; margin: 0; padding: 0; }
                h1 { text-align: center; padding: 20px; background-color: #343a40; color: white; margin: 0; }
                table { border-collapse: collapse; margin: 30px auto; width: 90%; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
                th, td { padding: 12px 20px; text-align: left; border-bottom: 1px solid #ddd; }
                th { background-color: #6c757d; color: white; }
                tr:hover { background-color: #f1f1f1; }
                .success { color: green; font-weight: bold; }
                .warning { color: orange; font-weight: bold; }
                .error { color: red; font-weight: bold; }
                .image-container { margin-top: 10px; }
                img { height: 120px; margin-right: 10px; border-radius: 4px; border: 1px solid #ccc; }
            </style>
        </head>
        <body>
            <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h1>
            <p style="text-align:center;">–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: """ + str(total_duration) + """ —Å–µ–∫</p>
            <table>
                <tr><th>GEO</th><th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th><th>–°–∫—Ä–∏–Ω—à–æ—Ç—ã</th></tr>
        """)

        for result in test_results:
            geo_name, status = result.split(":", 1)
            status = status.strip()

            if "‚úÖ" in status:
                status_class = "success"
            elif "‚ö†Ô∏è" in status:
                status_class = "warning"
            else:
                status_class = "error"

            # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–æ 24 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
            geo_folder = os.path.join(BASE_SCREENSHOTS_PATH, geo_name)
            images_html = ""
            if os.path.exists(geo_folder):
                screenshots = [f for f in os.listdir(geo_folder) if f.endswith(".png")]
                for img_file in screenshots[:24]:
                    img_path = os.path.join(geo_folder, img_file).replace("\\", "/")
                    images_html += f'<img src="{img_path}" alt="{img_file}"/>'

            html_file.write(f"""
                <tr>
                    <td>{geo_name}</td>
                    <td class="{status_class}">{status}</td>
                    <td><div class="image-container">{images_html}</div></td>
                </tr>
            """)

        html_file.write("""
            </table>
        </body>
        </html>
        """)

    print(f"\n –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! HTML-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {html_report_path}")

    # –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–µ–æ –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å Surfshark, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        # os.system(r'start "" "C:\Program Files\Surfshark\Surfshark.exe" /stop')

if __name__ == "__main__":
    run_test()